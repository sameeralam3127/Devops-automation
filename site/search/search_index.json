{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Compute Central","text":"<p>Hello and welcome to Compute Central\u2014your ultimate hub for everything DevOps and Site Reliability Engineering (SRE)! Whether you're a seasoned professional or just starting out, I am here to help you unlock your potential with cutting-edge tools, actionable tips, and an engaged community of like-minded enthusiasts.  </p> <p>\ud83c\udfaf DevOps Tips Master the art of seamless integration and delivery with advice and best practices.</p> <p>\ud83d\udd27 SRE Tools and Insights Explore the latest tools and strategies to ensure your systems are highly reliable and scalable.</p> <p>\ud83d\udcd8 Hands-On Tutorials Step-by-step guides to help you configure, deploy, and optimize your infrastructure like a pro.</p> <p>\ud83c\udf10 Community-Driven Forums Engage with a vibrant community! Share your experiences, solve challenges, and discover hidden gems in the world of DevOps and SRE.</p>"},{"location":"#about-me","title":"\ud83d\udc68\u200d\ud83d\udcbb About Me","text":"<p>I\u2019m Sameer Alam a passionate DevOps engineer and Site Reliability advocate on a mission to simplify complex systems and enhance operational excellence. Over the years, I\u2019ve delved deep into the world of system management, learning the ins and outs of what makes systems tick.  </p> <p>\ud83d\udd17 Discover my projects and contributions My GitHub</p>"},{"location":"#learning-journey-continues","title":"\ud83d\udcda Learning Journey Continues","text":"<p>Browse through the rich archives of my earlier posts, dating back to 2016, when it all began on Blogger.  </p> <p>\ud83d\udd17 Explore the Old Blog Archive</p>"},{"location":"#lets-connect","title":"\ud83d\udce9 Let\u2019s Connect!","text":"<p>Have a question, feedback, or an idea you\u2019d like to share? Don\u2019t hesitate to reach out. </p> <p>Happy learning and building, \u2013 Sameer</p>"},{"location":"docker/docker/","title":"Containerization techniques","text":"What is Docker? <p>Docker is an open-source platform designed to simplify application deployment. It ensures that your applications run smoothly, regardless of where they are executed. Docker is a platform that enables developers to build, ship, and run applications in isolated environments called containers. These containers bundle everything an application needs, including libraries, dependencies, and configurations, ensuring it works consistently across different environments.</p> Why Use Docker? <ul> <li>Consistency: Applications behave the same in development, testing, and production.  </li> <li>Lightweight: Containers share the host OS, making them more efficient than virtual machines.  </li> <li>Portable: Run your application anywhere, from your laptop to the cloud.</li> </ul> Getting Started with Docker Installation <p>1. Install Docker on Linux <pre><code># Update the package index\nsudo apt update\n\n# Install required packages\nsudo apt install apt-transport-https ca-certificates curl software-properties-common -y\n\n# Add Docker\u2019s official GPG key\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n\n# Add the Docker repository\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n\n# Install Docker Engine\nsudo apt update\nsudo apt install docker-ce docker-ce-cli containerd.io -y\n\n# Verify the installation\ndocker --version\n</code></pre></p>"},{"location":"docker/docker/#install-docker-on-macos","title":"Install Docker on macOS","text":"Pre-requisites for macOS <ul> <li>Docker requires macOS 10.14 or newer.</li> <li>Ensure you have enough system resources for Docker Desktop.</li> </ul> <pre><code># Download Docker Desktop for Mac from the official site:\nhttps://www.docker.com/products/docker-desktop/\n\n# Install Docker by dragging it to the Applications folder.\n# Open Docker Desktop, and follow the setup instructions.\n</code></pre>"},{"location":"docker/docker/#docker-on-windows","title":"Docker on Windows","text":"Supported Windows Versions <p>Docker Desktop supports Windows 10 64-bit (Professional, Enterprise, and Education) and Windows 11.</p> <ol> <li>Download Docker Desktop from Docker's official website.  </li> <li>Run the installer and follow the on-screen instructions.  </li> <li>After installation, verify it using the command:     <pre><code>docker --version\n</code></pre></li> </ol> <p>\ud83d\udcd2 Useful Tips</p> <p>Enable Non-Root Docker Access on Linux</p> <p>To run Docker commands without <code>sudo</code>, add your user to the Docker group: <pre><code>sudo usermod -aG docker $USER\n</code></pre> Log out and log back in for the changes to take effect.</p> <p>Docker Resource Limits</p> <p>Containers share system resources with the host. Ensure you allocate sufficient CPU and memory for optimal performance.</p> <p>Docker Desktop vs Docker Engine</p> <ul> <li>Docker Desktop: Includes GUI tools and is ideal for macOS and Windows.  </li> <li>Docker Engine: A lightweight CLI-based version for Linux servers.</li> </ul> <p>\u2705 Verify Your Docker Installation</p> <p>After installation, run a test container to verify Docker is working correctly:</p> <pre><code>docker run hello-world\n</code></pre> <p>If Docker is installed correctly, you should see the following output: <pre><code>Hello from Docker!\nThis message shows that your installation appears to be working correctly.\n</code></pre></p>"},{"location":"docker/docker/#docker-command-cheat-sheet","title":"Docker Command Cheat Sheet","text":""},{"location":"docker/docker/#basic-commands","title":"Basic Commands","text":"<ul> <li> <p>Check Docker Version   Verify the Docker installation and version:   <pre><code>docker --version\n</code></pre></p> </li> <li> <p>List Docker Images   View all images stored locally:   <pre><code>docker images\n</code></pre></p> </li> <li> <p>List Running Containers   Display currently running containers:   <pre><code>docker ps\n</code></pre></p> </li> <li> <p>List All Containers (including stopped)   Show both active and inactive containers:   <pre><code>docker ps -a\n</code></pre></p> </li> <li> <p>Run a Container   Start a new container:   <pre><code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]\n</code></pre></p> </li> <li> <p>Stop a Running Container   Gracefully stop a running container:   <pre><code>docker stop CONTAINER_ID\n</code></pre></p> </li> <li> <p>Remove a Container   Delete a stopped container:   <pre><code>docker rm CONTAINER_ID\n</code></pre></p> </li> <li> <p>Remove an Image   Delete a local image:   <pre><code>docker rmi IMAGE_ID\n</code></pre></p> </li> </ul>"},{"location":"docker/docker/#building-docker-images","title":"Building Docker Images","text":"<ul> <li> <p>Build an Image from a Dockerfile   Create a Docker image using a <code>Dockerfile</code>:   <pre><code>docker build -t IMAGE_NAME:TAG PATH\n</code></pre></p> </li> <li> <p>Build an Image without Using Cache   Force a fresh build without cache:   <pre><code>docker build --no-cache -t IMAGE_NAME:TAG PATH\n</code></pre></p> </li> <li> <p>View Build History   Check the layer history of an image:   <pre><code>docker history IMAGE_NAME:TAG\n</code></pre></p> </li> </ul>"},{"location":"docker/docker/#dockerfile-basics","title":"Dockerfile Basics","text":"<ul> <li>Basic Dockerfile Example <pre><code># Use a base image\nFROM ubuntu:latest\n\n# Set environment variables\nENV MY_ENV_VAR=value\n\n# Install dependencies\nRUN apt-get update &amp;&amp; apt-get install -y curl\n\n# Copy files into the image\nCOPY ./local_file /container_file\n\n# Define the default command\nCMD [\"echo\", \"Hello, Docker!\"]\n</code></pre></li> </ul>"},{"location":"docker/docker/#networking-and-volumes","title":"Networking and Volumes","text":"<ul> <li> <p>Create a Network   Set up a custom Docker network:   <pre><code>docker network create my_network\n</code></pre></p> </li> <li> <p>Run a Container on a Network   Connect a container to a specific network:   <pre><code>docker run --network my_network IMAGE_NAME\n</code></pre></p> </li> <li> <p>Create a Volume   Create a persistent volume for data storage:   <pre><code>docker volume create my_volume\n</code></pre></p> </li> <li> <p>Run a Container with a Volume   Mount a volume to a container:   <pre><code>docker run -v my_volume:/container_path IMAGE_NAME\n</code></pre></p> </li> </ul>"},{"location":"docker/docker/#docker-compose","title":"Docker Compose","text":"<ul> <li> <p>Start Services   Bring up services defined in a <code>docker-compose.yml</code>:   <pre><code>docker-compose up\n</code></pre></p> </li> <li> <p>Start Services in Detached Mode   Run services in the background:   <pre><code>docker-compose up -d\n</code></pre></p> </li> <li> <p>Stop Services   Shut down all services:   <pre><code>docker-compose down\n</code></pre></p> </li> <li> <p>View Logs   Check logs for all services:   <pre><code>docker-compose logs\n</code></pre></p> </li> </ul>"},{"location":"docker/docker/#pipeline-commands","title":"Pipeline Commands","text":"<ul> <li> <p>Push an Image to Docker Hub   Upload an image to a Docker registry:   <pre><code>docker push IMAGE_NAME:TAG\n</code></pre></p> </li> <li> <p>Pull an Image from Docker Hub   Download an image from a registry:   <pre><code>docker pull IMAGE_NAME:TAG\n</code></pre></p> </li> <li> <p>Tag an Image   Add a new tag to an image:   <pre><code>docker tag SOURCE_IMAGE:TAG TARGET_IMAGE:TAG\n</code></pre></p> </li> <li> <p>Login to Docker Hub   Authenticate to push or pull images:   <pre><code>docker login\n</code></pre></p> </li> </ul>"},{"location":"docker/docker/#troubleshooting-and-scenarios","title":"Troubleshooting and Scenarios","text":""},{"location":"docker/docker/#scenario-1-container-not-starting","title":"Scenario 1: Container Not Starting","text":"<ul> <li>Symptom: You run a container, but it exits immediately.  </li> <li>Solution:   Check the container logs:   <pre><code>docker logs CONTAINER_ID\n</code></pre>   Ensure the container\u2019s command is valid and not exiting with errors.</li> </ul> Tip <p>Check the Dockerfile or the container command to see if it exits immediately due to a failure or invalid command. Adding <code>-it</code> flag for an interactive terminal can help debug.</p>"},{"location":"docker/docker/#scenario-2-image-build-fails","title":"Scenario 2: Image Build Fails","text":"<ul> <li>Symptom: <code>docker build</code> fails with an error.  </li> <li>Solution:</li> <li>Check the error message and fix syntax issues in your <code>Dockerfile</code>.  </li> <li>Use <code>--no-cache</code> to bypass cached layers:     <pre><code>docker build --no-cache -t IMAGE_NAME:TAG .\n</code></pre></li> </ul> Cache Issues <p>Sometimes, the Docker build cache can cause problems with outdated dependencies or commands. Use <code>--no-cache</code> to ensure a clean build.</p>"},{"location":"docker/docker/#scenario-3-port-already-in-use","title":"Scenario 3: Port Already in Use","text":"<ul> <li>Symptom: You get a <code>port already in use</code> error when running a container.  </li> <li>Solution:</li> <li>Identify the process using the port:     <pre><code>lsof -i :PORT\n</code></pre></li> <li>Stop the conflicting process or choose another port for the container:     <pre><code>docker run -p NEW_PORT:CONTAINER_PORT IMAGE_NAME\n</code></pre></li> </ul> Port Conflicts <p>Port conflicts occur when two processes try to bind to the same port. Use <code>docker ps</code> to list running containers and their ports.</p>"},{"location":"docker/docker/#scenario-4-cannot-remove-containerimage","title":"Scenario 4: Cannot Remove Container/Image","text":"<ul> <li>Symptom: <code>docker rm</code> or <code>docker rmi</code> fails with a \"container/image in use\" error.  </li> <li>Solution:</li> <li>Stop all running containers:     <pre><code>docker stop $(docker ps -q)\n</code></pre></li> <li>Force remove the container/image:     <pre><code>docker rm -f CONTAINER_ID\ndocker rmi -f IMAGE_ID\n</code></pre></li> </ul> Force Remove <p>The <code>-f</code> flag forces the removal of containers or images that are in use or running.</p>"},{"location":"jenkins/jenkins/","title":"Jenkins Installation and First Pipeline Setup on Ubuntu","text":"Mastering Jenkins: Installing on Ubuntu and Creating Your First Pipeline <p>Jenkins is an open-source automation server that helps with continuous integration and continuous delivery (CI/CD). This guide will walk you through the process of installing Jenkins on Ubuntu, checking system details using a Bash script, and creating your first pipeline using Jenkins' powerful pipeline functionality.</p>"},{"location":"jenkins/jenkins/#step-1-installing-jenkins-on-ubuntu","title":"Step 1: Installing Jenkins on Ubuntu","text":"<p>Before we begin, ensure your system is up-to-date.</p>"},{"location":"jenkins/jenkins/#11-update-system-packages","title":"1.1 Update System Packages","text":"<p>First, update your system\u2019s package list to ensure everything is up to date:</p> <pre><code>sudo apt update &amp;&amp; sudo apt upgrade -y\n</code></pre>"},{"location":"jenkins/jenkins/#12-install-java","title":"1.2 Install Java","text":"<p>Jenkins requires Java to run. Install the default Java Development Kit (JDK):</p> <pre><code>sudo apt install openjdk-11-jdk -y\n</code></pre> <p>To verify the installation, use:</p> <pre><code>java -version\n</code></pre>"},{"location":"jenkins/jenkins/#13-add-jenkins-repository","title":"1.3 Add Jenkins Repository","text":"<p>To install Jenkins, add its official repository to your system:</p> <pre><code>wget -q -O - https://pkg.jenkins.io/jenkins.io.key | sudo tee /etc/apt/trusted.gpg.d/jenkins.asc\n</code></pre> <p>Next, add the Jenkins repository:</p> <pre><code>sudo sh -c 'echo deb http://pkg.jenkins.io/debian/ stable main &gt; /etc/apt/sources.list.d/jenkins.list'\n</code></pre>"},{"location":"jenkins/jenkins/#14-install-jenkins","title":"1.4 Install Jenkins","text":"<p>Once the repository is added, update the package list and install Jenkins:</p> <pre><code>sudo apt update\nsudo apt install jenkins -y\n</code></pre>"},{"location":"jenkins/jenkins/#15-start-jenkins","title":"1.5 Start Jenkins","text":"<p>Enable and start the Jenkins service:</p> <pre><code>sudo systemctl enable jenkins\nsudo systemctl start jenkins\n</code></pre> <p>You can check the status of Jenkins:</p> <pre><code>sudo systemctl status jenkins\n</code></pre>"},{"location":"jenkins/jenkins/#step-2-accessing-jenkins","title":"Step 2: Accessing Jenkins","text":"<p>Jenkins will be running on port 8080 by default. Open your browser and navigate to:</p> <pre><code>http://localhost:8080\n</code></pre>"},{"location":"jenkins/jenkins/#21-unlock-jenkins","title":"2.1 Unlock Jenkins","text":"<p>To unlock Jenkins, you will need the <code>initialAdminPassword</code>. Retrieve it with the following command:</p> <pre><code>sudo cat /var/lib/jenkins/secrets/initialAdminPassword\n</code></pre> <p>Enter the password in the browser prompt.</p>"},{"location":"jenkins/jenkins/#22-install-suggested-plugins","title":"2.2 Install Suggested Plugins","text":"<p>Once you\u2019ve unlocked Jenkins, you'll be prompted to install plugins. Choose the \"Install suggested plugins\" option to proceed with the default plugin installation.</p>"},{"location":"jenkins/jenkins/#step-3-creating-your-first-jenkins-pipeline","title":"Step 3: Creating Your First Jenkins Pipeline","text":""},{"location":"jenkins/jenkins/#31-create-a-new-pipeline-project","title":"3.1 Create a New Pipeline Project","text":"<ol> <li>After logging into Jenkins, click on New Item.</li> <li>Enter a name for your pipeline (e.g., \"First-Pipeline\").</li> <li>Select Pipeline and click OK.</li> </ol>"},{"location":"jenkins/jenkins/#32-configure-the-pipeline","title":"3.2 Configure the Pipeline","text":"<p>In the pipeline configuration page, scroll down to the Pipeline section. Here, you'll define your pipeline script. For this guide, we\u2019ll use a simple pipeline that checks system details using a Bash script.</p> <pre><code>pipeline {\n    agent any\n\n    stages {\n        stage('Check System Details') {\n            steps {\n                script {\n                    sh 'bash check_system_details.sh'\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"jenkins/jenkins/#33-create-a-bash-script","title":"3.3 Create a Bash Script","text":"<p>In your Jenkins workspace, create a script called <code>check_system_details.sh</code>. This script will gather system information.</p> <pre><code>#!/bin/bash\n\necho \"System Information:\"\necho \"--------------------\"\nhostnamectl\necho\ndf -h\necho\nfree -h\necho\nuname -a\n</code></pre> <p>Ensure that the script has executable permissions:</p> <pre><code>chmod +x check_system_details.sh\n</code></pre>"},{"location":"jenkins/jenkins/#34-run-the-pipeline","title":"3.4 Run the Pipeline","text":"<p>Save the pipeline and click Build Now to execute the pipeline. Jenkins will run the <code>check_system_details.sh</code> script, and you should see the system details in the build log.</p>"},{"location":"kubernetes/kubernetes/","title":"Kubernetes","text":"Mastering Kubernetes: From Introduction to Deploying NGINX <p>Kubernetes is a powerful open-source platform that automates the management, deployment, and scaling of containerized applications. In this guide, we'll walk you through the basics of Kubernetes, how to set it up with Docker Desktop, use the <code>kubectl</code> command-line tool, and deploy an NGINX instance to see how it works.</p>"},{"location":"kubernetes/kubernetes/#what-is-kubernetes","title":"What is Kubernetes?","text":"<p>Kubernetes, often abbreviated as K8s, is a container orchestration platform designed to simplify the deployment and management of containerized applications. It abstracts away the underlying infrastructure and makes it easier to deploy and scale applications seamlessly.</p> <p>Here\u2019s a quick overview of the main concepts in Kubernetes:</p>"},{"location":"kubernetes/kubernetes/#key-concepts","title":"Key Concepts","text":"<ol> <li>Pod:</li> <li>What It Is: The smallest and simplest Kubernetes object. A Pod can host one or more containers that share the same network and storage.</li> <li> <p>What It Does: It serves as the environment where your application containers run.</p> </li> <li> <p>Deployment:</p> </li> <li>What It Is: Manages the deployment of Pods. Ensures the desired number of Pods are running and handles updates.</li> <li> <p>What It Does: Helps with scaling and automating the update process for your application.</p> </li> <li> <p>Service:</p> </li> <li>What It Is: A way to expose and access a set of Pods with a stable network address.</li> <li> <p>What It Does: Handles load balancing and makes sure that services can find and communicate with each other reliably.</p> </li> <li> <p>ReplicaSet:</p> </li> <li>What It Is: Ensures that the specified number of Pod replicas are running.</li> <li> <p>What It Does: Helps maintain the availability of your application by scaling Pods when necessary.</p> </li> <li> <p>Namespace:</p> </li> <li>What It Is: Provides a way to divide cluster resources into separate, logical groups.</li> <li>What It Does: Useful for managing different environments (e.g., development, production) within the same cluster.</li> </ol>"},{"location":"kubernetes/kubernetes/#setting-up-kubernetes-in-docker-desktop","title":"Setting Up Kubernetes in Docker Desktop","text":"<p>Docker Desktop includes a built-in Kubernetes cluster that can be easily configured for local development. Here's how you can set it up:</p> <ol> <li> <p>Open Docker Desktop:</p> <ul> <li>Start Docker Desktop from your application menu.</li> </ul> </li> <li> <p>Go to Settings:</p> <ul> <li>Click on the gear icon (\u2699\ufe0f) in the top-right corner.</li> </ul> </li> <li> <p>Select the Kubernetes Tab:</p> <ul> <li>Click on the \"Kubernetes\" tab from the sidebar.</li> </ul> </li> <li> <p>Enable Kubernetes:</p> <ul> <li>Check the box that says \"Enable Kubernetes\".</li> </ul> </li> <li> <p>Apply &amp; Restart:</p> <ul> <li>Click \"Apply &amp; Restart\" to apply the changes. Docker Desktop will restart to configure Kubernetes.</li> </ul> </li> <li> <p>Wait for Setup:</p> <ul> <li>It may take a few minutes for Kubernetes to start. Docker Desktop will show the status of the Kubernetes setup.</li> </ul> <p>??? info \"Tip\"     If you are new to Kubernetes, Docker Desktop is a great way to get started as it provides an easy local environment without needing to set up a full Kubernetes cluster.</p> </li> </ol>"},{"location":"kubernetes/kubernetes/#what-is-kubectl","title":"What is <code>kubectl</code>?","text":"<p><code>kubectl</code> is the command-line tool for interacting with Kubernetes clusters. It allows you to create, manage, and troubleshoot your Kubernetes resources.</p>"},{"location":"kubernetes/kubernetes/#key-features-of-kubectl","title":"Key Features of <code>kubectl</code>:","text":"<ul> <li>Run Commands: Manage Pods, Deployments, and other resources.</li> <li>Change Configurations: Apply YAML files to create or update Kubernetes resources.</li> <li>Check Status: View the status of your resources to troubleshoot or monitor your application.</li> </ul>"},{"location":"kubernetes/kubernetes/#common-kubectl-commands","title":"Common <code>kubectl</code> Commands:","text":"<ul> <li>Get Resources:   <pre><code>kubectl get [resource]\n</code></pre></li> <li> <p>Lists resources such as Pods, Services, Deployments, etc.</p> </li> <li> <p>Describe Resource:   <pre><code>kubectl describe [resource] [name]\n</code></pre></p> </li> <li> <p>Shows detailed information about a specific resource.</p> </li> <li> <p>Apply Configuration:   <pre><code>kubectl apply -f [file.yaml]\n</code></pre></p> </li> <li> <p>Applies changes from a YAML configuration file.</p> </li> <li> <p>Delete Resource:   <pre><code>kubectl delete -f [file.yaml]\n</code></pre></p> </li> <li>Deletes resources defined in a YAML file.</li> </ul> Deleting Resources <p>Be careful when using the <code>kubectl delete</code> command, as it permanently removes resources like Pods and Services from your cluster.</p>"},{"location":"kubernetes/kubernetes/#checking-versions","title":"Checking Versions","text":""},{"location":"kubernetes/kubernetes/#check-kubectl-version","title":"Check <code>kubectl</code> Version","text":"<p>To check the version of <code>kubectl</code>, run the following command:</p> <pre><code>kubectl version --client\n</code></pre> <p>For both the client and server versions of Kubernetes, use:</p> <pre><code>kubectl version\n</code></pre>"},{"location":"kubernetes/kubernetes/#deploying-nginx-instances","title":"Deploying NGINX Instances","text":"<p>Now, let\u2019s walk through deploying multiple NGINX instances on your Kubernetes cluster.</p>"},{"location":"kubernetes/kubernetes/#step-1-create-a-deployment","title":"Step 1: Create a Deployment","text":"<ol> <li>Open Terminal:</li> <li> <p>Use your terminal or command prompt.</p> </li> <li> <p>Create Deployment YAML File:</p> </li> <li>Save the following YAML definition to a file named <code>nginx-deployment.yaml</code>:</li> </ol> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:latest\n        ports:\n        - containerPort: 80\n</code></pre> <ul> <li> <p>What It Does: Defines a Deployment with 3 replicas of NGINX.</p> </li> <li> <p>Apply the Deployment:</p> </li> <li>Run:</li> </ul> <pre><code>kubectl apply -f nginx-deployment.yaml\n</code></pre>"},{"location":"kubernetes/kubernetes/#step-2-expose-the-deployment","title":"Step 2: Expose the Deployment","text":"<ol> <li>Create Service YAML File:</li> <li>Save the following YAML to <code>nginx-service.yaml</code>:</li> </ol> <pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-service\nspec:\n  selector:\n    app: nginx\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 80\n  type: LoadBalancer\n</code></pre> <ul> <li> <p>What It Does: Creates a Service to expose the NGINX Deployment.</p> </li> <li> <p>Apply the Service:</p> </li> <li>Run:</li> </ul> <pre><code>kubectl apply -f nginx-service.yaml\n</code></pre> <ol> <li>Access NGINX in Browser:</li> <li>Open a web browser and navigate to:</li> </ol> <pre><code>http://127.0.0.1/\n</code></pre>"},{"location":"kubernetes/kubernetes/#step-3-check-the-status","title":"Step 3: Check the Status","text":"<ol> <li>List Pods:</li> <li>Check the status of the Pods:</li> </ol> <pre><code>kubectl get pods\n</code></pre> <ol> <li>Check Deployment:</li> <li>Verify the deployment:</li> </ol> <pre><code>kubectl get deployments\n</code></pre> <ol> <li>Check Service:</li> <li>View the status of the Service:</li> </ol> <pre><code>kubectl get services\n</code></pre> <ul> <li>Note: Docker Desktop includes a Kubernetes dashboard, which provides a visual view of your resources.</li> </ul>"},{"location":"kubernetes/kubernetes/#step-4-clean-up","title":"Step 4: Clean Up","text":"<ol> <li>Delete the Service:</li> <li>To remove the Service:</li> </ol> <pre><code>kubectl delete -f nginx-service.yaml\n</code></pre> <ol> <li>Delete the Deployment:</li> <li>To remove the Deployment:</li> </ol> <pre><code>kubectl delete -f nginx-deployment.yaml\n</code></pre> <ol> <li>Verify Deletion:</li> <li>Ensure that the Pods and Services have been removed:</li> </ol> <pre><code>kubectl get pods\nkubectl get services\n</code></pre>"},{"location":"shell-scripts/handy-scripts/","title":"SSL Certificate Installation","text":"<pre><code>#!/bin/bash\n\n# Function to check if the OS is RHEL or Debian-based\ndetect_os() {\n    if [ -f /etc/redhat-release ]; then\n        OS=\"RHEL\"\n    elif [ -f /etc/debian_version ]; then\n        OS=\"Debian\"\n    else\n        echo \"Unsupported OS\"\n        exit 1\n    fi\n}\n\n# Function to check and install Certbot\ninstall_certbot() {\n    echo \"Checking if Certbot is installed...\"\n\n    if command -v certbot &amp;&gt; /dev/null; then\n        echo \"Certbot is already installed.\"\n        return\n    fi\n\n    echo \"Certbot not found. Installing Certbot...\"\n\n    if [ \"$OS\" == \"Debian\" ]; then\n        apt-get update\n        apt-get install -y certbot\n    elif [ \"$OS\" == \"RHEL\" ]; then\n        yum install -y epel-release\n        yum install -y certbot\n    else\n        echo \"Unsupported OS for Certbot installation\"\n        exit 1\n    fi\n}\n\n# Function to check the existing SSL certificate details\ncheck_existing_ssl() {\n    echo \"Checking existing SSL certificates for HTTPD and NGINX...\"\n\n    for config_file in /etc/httpd/conf.d/ssl.conf /etc/nginx/nginx.conf; do\n        if [ -f \"$config_file\" ]; then\n            echo \"SSL Configuration found in: $config_file\"\n            ssl_cert=$(grep -i \"SSLCertificateFile\\|ssl_certificate\" $config_file | awk '{print $2}')\n            if [ -f \"$ssl_cert\" ]; then\n                echo \"SSL Certificate Details:\"\n                openssl x509 -in $ssl_cert -noout -text | grep -E 'Issuer:|Subject:|Not After :'\n            else\n                echo \"SSL Certificate not found in the specified location: $ssl_cert\"\n            fi\n        else\n            echo \"SSL configuration file not found for $config_file\"\n        fi\n    done\n}\n\n# Function to create a private key and CSR\ncreate_key_and_csr() {\n    echo \"Creating Private Key and CSR...\"\n    mkdir -p /certs\n\n    read -p \"Enter Country (2 letter code): \" country\n    read -p \"Enter State or Province Name: \" state\n    read -p \"Enter Locality Name (e.g., city): \" locality\n    read -p \"Enter Organization Name: \" organization\n    read -p \"Enter Organizational Unit Name: \" unit\n    read -p \"Enter Common Name (e.g., domain name): \" common_name\n    read -p \"Enter Email Address: \" email\n\n    if [ -z \"$common_name\" ]; then\n        echo \"Error: Common Name (domain) is required.\"\n        exit 1\n    fi\n\n    openssl req -newkey rsa:2048 -nodes -keyout /certs/mydomain.key -out /certs/mydomain.csr -subj \"/C=$country/ST=$state/L=$locality/O=$organization/OU=$unit/CN=$common_name/emailAddress=$email\"\n    if [ $? -ne 0 ]; then\n        echo \"Error creating CSR\"\n        exit 1\n    fi\n    echo \"Private key and CSR created successfully.\"\n}\n\n# Function to obtain a certificate using Let's Encrypt\ncreate_ssl_certificate() {\n    echo \"Generating SSL certificate using Let's Encrypt...\"\n\n    install_certbot\n\n    certbot certonly --standalone --non-interactive --agree-tos --email $email -d $common_name\n    if [ $? -ne 0 ]; then\n        echo \"Error generating SSL certificate\"\n        exit 1\n    fi\n    echo \"SSL certificate generated successfully.\"\n}\n\n# Function to move certificate and key to correct locations for HTTPD and NGINX\ninstall_certificate() {\n    echo \"Installing SSL certificate for HTTPD and NGINX...\"\n    mkdir -p /etc/httpd/ssl /etc/nginx/ssl\n\n    mv /etc/letsencrypt/live/$common_name/fullchain.pem /etc/httpd/ssl/mydomain.crt\n    mv /etc/letsencrypt/live/$common_name/privkey.pem /etc/httpd/ssl/mydomain.key\n    mv /etc/letsencrypt/live/$common_name/fullchain.pem /etc/nginx/ssl/mydomain.crt\n    mv /etc/letsencrypt/live/$common_name/privkey.pem /etc/nginx/ssl/mydomain.key\n\n    # Set permissions\n    chmod 600 /etc/httpd/ssl/mydomain.key\n    chown root:root /etc/httpd/ssl/mydomain.key\n    chmod 644 /etc/httpd/ssl/mydomain.crt\n    chown root:root /etc/httpd/ssl/mydomain.crt\n    chmod 600 /etc/nginx/ssl/mydomain.key\n    chown root:root /etc/nginx/ssl/mydomain.key\n    chmod 644 /etc/nginx/ssl/mydomain.crt\n    chown root:root /etc/nginx/ssl/mydomain.crt\n\n    # Update HTTPD conf\n    if grep -q \"SSLCertificateFile\" /etc/httpd/conf.d/ssl.conf; then\n        sed -i \"s#SSLCertificateFile .*#SSLCertificateFile /etc/httpd/ssl/mydomain.crt#\" /etc/httpd/conf.d/ssl.conf\n        sed -i \"s#SSLCertificateKeyFile .*#SSLCertificateKeyFile /etc/httpd/ssl/mydomain.key#\" /etc/httpd/conf.d/ssl.conf\n    else\n        echo \"SSLCertificateFile /etc/httpd/ssl/mydomain.crt\" &gt;&gt; /etc/httpd/conf.d/ssl.conf\n        echo \"SSLCertificateKeyFile /etc/httpd/ssl/mydomain.key\" &gt;&gt; /etc/httpd/conf.d/ssl.conf\n    fi\n\n    # Update NGINX conf\n    if grep -q \"ssl_certificate\" /etc/nginx/nginx.conf; then\n        sed -i \"s#ssl_certificate .*#ssl_certificate /etc/nginx/ssl/mydomain.crt;#\" /etc/nginx/nginx.conf\n        sed -i \"s#ssl_certificate_key .*#ssl_certificate_key /etc/nginx/ssl/mydomain.key;#\" /etc/nginx/nginx.conf\n    else\n        echo \"ssl_certificate /etc/nginx/ssl/mydomain.crt;\" &gt;&gt; /etc/nginx/nginx.conf\n        echo \"ssl_certificate_key /etc/nginx/ssl/mydomain.key;\" &gt;&gt; /etc/nginx/nginx.conf\n    fi\n\n    systemctl restart httpd nginx\n\n    if [ $? -ne 0 ]; then\n        echo \"Error restarting services. Checking logs...\"\n        if [ \"$OS\" == \"RHEL\" ]; then\n            cat /var/log/httpd/error_log /var/log/nginx/error.log\n        else\n            cat /var/log/apache2/error.log /var/log/nginx/error.log\n        fi\n        exit 1\n    fi\n\n    echo \"SSL Certificate installed and services restarted successfully.\"\n}\n\n# Function to renew SSL certificate\nrenew_certificate() {\n    echo \"Renewing SSL certificate...\"\n    certbot renew\n    if [ $? -ne 0 ]; then\n        echo \"Error renewing SSL certificate.\"\n        exit 1\n    fi\n    install_certificate\n}\n\n# Function to validate HTTPS connection\nvalidate_https() {\n    echo \"Validating HTTPS connection on port 443...\"\n    curl -Is https://$common_name:443 | head -n 1\n    if [ $? -ne 0 ]; then\n        echo \"Error: Unable to connect to $common_name on port 443.\"\n        exit 1\n    fi\n    echo \"HTTPS validation successful.\"\n}\n\n# Menu-driven interface\nwhile true; do\n    echo \"SSL Certificate Management Script\"\n    echo \"1. Check Existing SSL Certificate\"\n    echo \"2. Create Key and CSR\"\n    echo \"3. Generate SSL Certificate (Let's Encrypt)\"\n    echo \"4. Install Certificate\"\n    echo \"5. Renew SSL Certificate\"\n    echo \"6. Validate HTTPS Connection\"\n    echo \"7. Exit\"\n\n    read -p \"Enter your choice: \" choice\n\n    case $choice in\n        1) check_existing_ssl ;;\n        2) create_key_and_csr ;;\n        3) create_ssl_certificate ;;\n        4) install_certificate ;;\n        5) renew_certificate ;;\n        6) validate_https ;;\n        7) echo \"Exiting...\"; exit ;;\n        *) echo \"Invalid choice. Please select a valid option.\" ;;\n    esac\ndone\n</code></pre>"},{"location":"sonarqube/sonarqube/","title":"SonarQube Installation, Configuration, and Integration with Jenkins","text":"Mastering SonarQube: Installation, Configuration, and Jenkins Integration <p>SonarQube is an open-source platform that provides continuous inspection of code quality. It performs automatic reviews to detect bugs, vulnerabilities, and code smells in your codebase. This guide will walk you through installing SonarQube on Ubuntu, configuring it, and integrating it with Jenkins to enhance your continuous integration and continuous delivery (CI/CD) pipeline.</p>"},{"location":"sonarqube/sonarqube/#what-is-sonarqube","title":"What is SonarQube?","text":"<p>SonarQube is a powerful tool for continuous code quality inspection. It helps developers identify and fix issues early in the development lifecycle, ensuring that their code is secure, maintainable, and efficient. SonarQube can analyze code in various programming languages, providing feedback on code quality metrics such as bugs, vulnerabilities, code smells, duplications, and test coverage.</p>"},{"location":"sonarqube/sonarqube/#step-1-installing-sonarqube-on-ubuntu","title":"Step 1: Installing SonarQube on Ubuntu","text":""},{"location":"sonarqube/sonarqube/#11-prerequisites","title":"1.1 Prerequisites","text":"<p>Before installing SonarQube, ensure that you have Java (JDK 11 or newer) installed. If not, install it using the following command:</p> <pre><code>sudo apt update\nsudo apt install openjdk-11-jdk -y\n</code></pre> <p>Verify the Java installation:</p> <pre><code>java -version\n</code></pre>"},{"location":"sonarqube/sonarqube/#12-install-dependencies","title":"1.2 Install Dependencies","text":"<p>SonarQube requires PostgreSQL as its database backend. To install PostgreSQL:</p> <pre><code>sudo apt install postgresql postgresql-contrib -y\n</code></pre> <p>After installation, create a new database and user for SonarQube:</p> <pre><code>sudo -u postgres psql\nCREATE USER sonar WITH PASSWORD 'sonar';\nCREATE DATABASE sonar;\nGRANT ALL PRIVILEGES ON DATABASE sonar TO sonar;\n\\q\n</code></pre>"},{"location":"sonarqube/sonarqube/#13-download-and-install-sonarqube","title":"1.3 Download and Install SonarQube","text":"<p>Now, download the latest version of SonarQube from the official website:</p> <pre><code>wget https://binaries.sonarsource.com/CommercialEdition/sonarqube-9.3.0.51899.zip\n</code></pre> <p>Unzip the downloaded file:</p> <pre><code>unzip sonarqube-9.3.0.51899.zip\nsudo mv sonarqube-9.3.0.51899 /opt/sonarqube\n</code></pre>"},{"location":"sonarqube/sonarqube/#14-configure-sonarqube","title":"1.4 Configure SonarQube","text":"<p>Navigate to the SonarQube configuration file:</p> <pre><code>cd /opt/sonarqube/conf\nsudo nano sonar.properties\n</code></pre> <p>Edit the following properties to set up your PostgreSQL database:</p> <pre><code>sonar.jdbc.url=jdbc:postgresql://localhost/sonar\nsonar.jdbc.username=sonar\nsonar.jdbc.password=sonar\n</code></pre>"},{"location":"sonarqube/sonarqube/#15-start-sonarqube","title":"1.5 Start SonarQube","text":"<p>SonarQube is bundled with a script to start the application. You can start SonarQube using the following commands:</p> <pre><code>cd /opt/sonarqube/bin/linux-x86-64\n./sonar.sh start\n</code></pre> <p>You can verify that SonarQube is running by visiting:</p> <pre><code>http://localhost:9000\n</code></pre> <p>The default login credentials are: - Username: admin - Password: admin</p>"},{"location":"sonarqube/sonarqube/#step-2-installing-the-sonarqube-plugin-for-jenkins","title":"Step 2: Installing the SonarQube Plugin for Jenkins","text":"<p>To integrate SonarQube with Jenkins, you need to install the SonarQube Scanner for Jenkins plugin.</p>"},{"location":"sonarqube/sonarqube/#21-install-the-plugin","title":"2.1 Install the Plugin","text":"<ol> <li>Open Jenkins in your browser (<code>http://localhost:8080</code>).</li> <li>Navigate to Manage Jenkins &gt; Manage Plugins.</li> <li>Search for SonarQube Scanner in the Available tab and install it.</li> </ol>"},{"location":"sonarqube/sonarqube/#step-3-configuring-sonarqube-in-jenkins","title":"Step 3: Configuring SonarQube in Jenkins","text":""},{"location":"sonarqube/sonarqube/#31-configure-sonarqube-server-in-jenkins","title":"3.1 Configure SonarQube Server in Jenkins","text":"<ol> <li>Go to Manage Jenkins &gt; Configure System.</li> <li>Scroll down to the SonarQube Servers section.</li> <li>Click Add SonarQube and enter the following details:</li> <li>Name: SonarQube (or any name you prefer)</li> <li>Server URL: <code>http://localhost:9000</code></li> <li>Authentication Token: To generate an authentication token, log in to SonarQube and go to My Account &gt; Security &gt; Generate Tokens.</li> </ol>"},{"location":"sonarqube/sonarqube/#32-install-the-sonarqube-scanner-in-jenkins","title":"3.2 Install the SonarQube Scanner in Jenkins","text":"<ol> <li>In the SonarQube Scanner section, click Add SonarQube Scanner.</li> <li>Enter the Installation Name (e.g., SonarQube Scanner) and set the Version.</li> </ol> <p>Jenkins will automatically detect the SonarQube Scanner when the plugin is installed.</p>"},{"location":"sonarqube/sonarqube/#step-4-create-a-jenkins-pipeline-to-run-sonarqube-analysis","title":"Step 4: Create a Jenkins Pipeline to Run SonarQube Analysis","text":""},{"location":"sonarqube/sonarqube/#41-create-a-new-jenkins-pipeline","title":"4.1 Create a New Jenkins Pipeline","text":"<ol> <li>From the Jenkins dashboard, click on New Item.</li> <li>Choose Pipeline and give it a name (e.g., SonarQube-Pipeline).</li> <li>Click OK.</li> </ol>"},{"location":"sonarqube/sonarqube/#42-define-the-pipeline-script","title":"4.2 Define the Pipeline Script","text":"<p>Add the following script in the Pipeline section. This pipeline will perform a SonarQube analysis on your project:</p> <pre><code>pipeline {\n    agent any\n    environment {\n        SONARQUBE = 'SonarQube'  // The name of the SonarQube server configured in Jenkins\n    }\n    stages {\n        stage('Checkout') {\n            steps {\n                git 'https://github.com/your-repository-url.git'\n            }\n        }\n        stage('SonarQube Analysis') {\n            steps {\n                script {\n                    // Run the SonarQube scanner\n                    sh \"sonar-scanner\"\n                }\n            }\n        }\n        stage('Build') {\n            steps {\n                // Build your project (e.g., using Maven, Gradle, etc.)\n                sh 'mvn clean install'\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"sonarqube/sonarqube/#43-run-the-pipeline","title":"4.3 Run the Pipeline","text":"<p>Save the pipeline and click Build Now. Jenkins will execute the pipeline, run the SonarQube analysis, and publish the results to SonarQube.</p>"},{"location":"sonarqube/sonarqube/#step-5-view-sonarqube-analysis-results","title":"Step 5: View SonarQube Analysis Results","text":"<p>After the pipeline runs, you can view the results by logging into the SonarQube dashboard at:</p> <pre><code>http://localhost:9000\n</code></pre> <p>Here, you\u2019ll see detailed code quality metrics, including:</p> <ul> <li>Code coverage</li> <li>Code duplication</li> <li>Code smells</li> <li>Vulnerabilities</li> <li>Bugs</li> </ul> <p>By following these steps, you\u2019ve successfully installed SonarQube, configured it, and integrated it with Jenkins to perform continuous code quality analysis. With SonarQube integrated into your Jenkins pipeline, you can automatically monitor code quality, identify issues early, and maintain high-quality code throughout your development lifecycle.</p> <p>?? info \"Tip\"     For better code quality enforcement, integrate SonarQube with Jenkins' automated build and testing process to prevent merging code that does not meet your quality standards.</p> <p>```</p>"},{"location":"sonarqube/sonarqube/#key-features","title":"Key Features:","text":"<ol> <li>SonarQube Setup: The guide walks users through installing and configuring SonarQube on Ubuntu with PostgreSQL as the database backend.</li> <li>Jenkins Integration: Instructions on integrating SonarQube with Jenkins via the SonarQube Scanner plugin.</li> <li>Pipeline Example: A Jenkins pipeline example that runs SonarQube analysis as part of the build process.</li> <li>User-Friendly Navigation: This guide is broken down into easy-to-follow steps with detailed explanations for each phase.</li> </ol>"}]}